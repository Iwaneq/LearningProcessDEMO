// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcAuthentication.Core.Data;

#nullable disable

namespace MvcAuthentication.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220607093315_AddRefreshToken")]
    partial class AddRefreshToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("MvcAuthentication.Core.ManyToMany.LevelQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuestionId");

                    b.ToTable("LevelQuestions");
                });

            modelBuilder.Entity("MvcAuthentication.Core.ManyToMany.QuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers");
                });

            modelBuilder.Entity("MvcAuthentication.Core.ManyToMany.UnansweredQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("QuestionId");

                    b.ToTable("UnansweredQuestion");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Abstracts.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Abstracts.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GoodAnswerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GoodAnswerId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("MvcAuthentication.Core.State.LevelProgressState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LevelId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("ProgressPrecentage")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("LevelId");

                    b.ToTable("LevelProgressStates");
                });

            modelBuilder.Entity("MvcAuthentication.Core.User.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MvcAuthentication.Core.ManyToMany.LevelQuestion", b =>
                {
                    b.HasOne("MvcAuthentication.Core.Model.Level", "Level")
                        .WithMany("LevelQuestions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcAuthentication.Core.Model.Abstracts.Question", "Question")
                        .WithMany("LevelQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MvcAuthentication.Core.ManyToMany.QuestionAnswer", b =>
                {
                    b.HasOne("MvcAuthentication.Core.Model.Abstracts.Answer", "Answer")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcAuthentication.Core.Model.Abstracts.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MvcAuthentication.Core.ManyToMany.UnansweredQuestion", b =>
                {
                    b.HasOne("MvcAuthentication.Core.State.LevelProgressState", "LevelProgressState")
                        .WithMany("UnansweredQuestions")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcAuthentication.Core.Model.Abstracts.Question", "Question")
                        .WithMany("UnansweredQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LevelProgressState");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Abstracts.Question", b =>
                {
                    b.HasOne("MvcAuthentication.Core.Model.Abstracts.Answer", "GoodAnswer")
                        .WithMany()
                        .HasForeignKey("GoodAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoodAnswer");
                });

            modelBuilder.Entity("MvcAuthentication.Core.State.LevelProgressState", b =>
                {
                    b.HasOne("MvcAuthentication.Core.User.Account", "Account")
                        .WithMany("LevelsProgress")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcAuthentication.Core.Model.Level", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Abstracts.Answer", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Abstracts.Question", b =>
                {
                    b.Navigation("LevelQuestions");

                    b.Navigation("QuestionAnswers");

                    b.Navigation("UnansweredQuestions");
                });

            modelBuilder.Entity("MvcAuthentication.Core.Model.Level", b =>
                {
                    b.Navigation("LevelQuestions");
                });

            modelBuilder.Entity("MvcAuthentication.Core.State.LevelProgressState", b =>
                {
                    b.Navigation("UnansweredQuestions");
                });

            modelBuilder.Entity("MvcAuthentication.Core.User.Account", b =>
                {
                    b.Navigation("LevelsProgress");
                });
#pragma warning restore 612, 618
        }
    }
}
